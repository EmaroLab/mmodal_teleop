/* Libraries */
#include "ros/ros.h"
#include "miro_teleop/PertinenceMapping.h"
#include <cstdio>
#include <cmath>

/* Constants */
#define HSIZE 400 // Horizontal map size (in cm)
#define VSIZE 400 // Vertical map size (in cm)
#define RES 40 // Grid resolution

/**
 * Pertinence Mapping Service function.
 * Maps all spatial relation landscapes into one matrix.
 *
 * With all the matrices generated by the Spatial Reasoner, this service
 * performs an element-wise mathematical operation to obtain a landscape
 * that is parameterized by the information given by the target pointed.
 * 
 * Then, a normalization is done to maintain the elements in the range [0,1].
 */
bool PertinenceMapper(miro_teleop::PertinenceMapping::Request  &req,
         	      miro_teleop::PertinenceMapping::Response &res)
{
	/* Number of relations */
	N = req.NumRelations;

	/* Qualifier vector */
	Q = req.Qualifiers;

	/* Input 3-D matrix to be processed (received from master) */
	std_msgs::Float64 matrices[N*RES*RES];

	/* Landscape matrix to be returned (mapped into an 1-D array) */
	std_msgs::Float64 landscape[RES*RES];

	ROS_INFO("Request received from central node");

	/* Obtain input from request */
	for(int i=0;i<req.matrices.size();i++)
		matrices[i].data = req.matrices[i].data;

	/* Perform mapping of all landscapes into one */
  	// Note: i = columns, j = rows
	for(int i=0;i<RES;i++)
	{
		for(int j=0;j<RES;j++)
		{
			// Obtain first relation matrix (scaled according to qualifier)
			landscape[i+RES*j].data = pow(matrices[i+RES*j].data,Q[0]);
			// Merge (perform fuzzy and) with other relations
			for(int k=1;k<N;k++)
			{
				landscape[i+RES*j].data = 
					fmin(landscape[i+RES*j].data, 
							pow(matrices[i+RES*j+k*RES*RES].data,Q[k]);
			}
		}
	}
	/* Attach obtained matrix to response */
	for(int i=0;i<RES*RES;i++)
	{
		res.landscape.push_back(landscape[i]);
	}

	ROS_INFO("Successfully mapped the pertinences");

  	return true;
}

/**
 * Pertinence Mapping Service Main function.
 * Initializes and advertises the service.
 */
int main(int argc, char **argv)
{
	ros::init(argc, argv, "pertinence_mapping_server");
	ros::NodeHandle n;
	ros::ServiceServer service =
		n.advertiseService("pertinence_mapper", PertinenceMapper);
	ROS_INFO("Pertinence Mapping service active");
	ros::spin();

	return 0;
}
